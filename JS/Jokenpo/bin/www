#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('20220503:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Integrating Socket.IO
const { Server } = require("socket.io");
const io = new Server(server);

var maxjogadores = 0;
var njogador = 0;

var players = { "idj1": 0, "nj1":"", "idj2": 0, "nj2":""}; 

// io.to(socketId).emit(/* ... */);


io.on('connection', (socket) => {
  console.log("Conexao criada!");
  socket.on("jogador", (jogador) => {
    if(jogador != undefined){   
      if(maxjogadores>-1){
        
        socket.emit('verifica',{jogador:jogador,id:socket.id,aprovado:true});
        maxjogadores++;
        if (njogador < 1){
          players.idj1 = socket.id;
          players.nj1 = jogador;
          njogador++;

          console.log("Jogador 1: "+players.nj1+" entrou!, id: "+players.idj1);
        } else {
          players.idj2 = socket.id;
          players.nj2 = jogador;

          console.log("Jogador 2: "+players.nj2+" entrou!, id: "+players.idj2);
        }
      } else {
        console.log("Limite max atingido: "+ maxjogadores);
        socket.emit('verifica',{jogador:jogador,id:socket.id,aprovado:false});
      }
    }
  });

  socket.on("pos", (posicao) => {
    socket.broadcast.emit('rpos',posicao);
  });

});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
